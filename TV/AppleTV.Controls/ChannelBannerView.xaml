<!--
  Copyright Â© 2022 Apple Inc. All rights reserved.
-->
<Control
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:Views="using:AppleTV.Controls"
  xmlns:ampc="using:AMP.UI.Controls"
  Name="ChannelBanner"
  IsTabStop="False"
  >

  <Control.Resources>
    <Views:FirstOfTypeConverter x:Key="SelectChannelBackgroundChild" ItemType="img" />
    <Views:StaticResourceValue x:Key="BackgroundImageContext" Value="{Binding children, Converter={StaticResource SelectChannelBackgroundChild}}" />
    <Views:JsonImageSource x:Key="BkgImageSource"
      Img="{Binding Value, Source={StaticResource BackgroundImageContext}}"
      RequestSize="{StaticResource BannerDefaultSize}"
      ResourceLookup="{StaticResource ImgSrcResourceLookup}"
      />
    <Views:JsonImageBrush x:Key="BkgImageBrush" JsonImageSource="{StaticResource BkgImageSource}" />

    <Views:FirstOfTypeConverter x:Key="SelectChannelLogoChild" ItemType="channelLogo" />
    <Views:StaticResourceValue x:Key="ChannelLogoContext" Value="{Binding children, Converter={StaticResource SelectChannelLogoChild}}" />

    <Views:FirstOfTypeConverter x:Key="SelectButtonChild" ItemType="button" />
    <Views:FirstOfTypeConverter x:Key="SelectDisclaimerTextChild" ItemType="disclaimerText" />
    <Views:FirstOfTypeConverter x:Key="SelectDescriptionChild" ItemType="description" />

    <Views:FilterConverter x:Key="FilterToArrayConverter" FilterType="Array" />
    <Views:StaticResourceValue x:Key="ChannelBackgroundContext" Value="{Binding children, Converter={StaticResource SelectChannelBackgroundChild}}" />

    <ampc:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
    <ampc:BooleanToInverseVisibilityConverter x:Key="BooleanToInverseVisibilityConverter" />
    <Views:StaticResourceValue x:Key="IsEntitled" Value="{Binding Value, Source={StaticResource BackgroundImageContext}, Converter={StaticResource NullToBooleanConverter}}" />
    <Views:StaticResourceValue x:Key="Background" Value="{Binding layout.backgroundColor}" />

    <ampc:KeyValueConverter x:Key="ChannelLogoConverter">
      <ampc:KeyValuePair Key="appleTVChannel" Value="ms-appx:///AMP.UI.Views/Assets/Channels/AppleTV Channels.svg" />
    </ampc:KeyValueConverter>

    <ampc:KeyValueConverter x:Key="TextBackgroundSelector" DefaultValue="{StaticResource LightThemeTextForegroundColor}">
      <ampc:KeyValuePair Key="light" Value="{StaticResource DarkThemeTextForegroundColor}" />
      <ampc:KeyValuePair Key="dark" Value="{StaticResource LightThemeTextForegroundColor}" />
    </ampc:KeyValueConverter>

    <x:Double x:Key="ChannelBannerUnentitledButtonMinWidth">250</x:Double>

    <Views:ImageSize x:Key="LogoSize"
      Height="60"
      FallbackAspectRatio="{StaticResource AspectRatio_8_3}"
      />
    <Views:JsonImageSource x:Key="LogoImageSource"
      Img="{Binding Value.children.img, Source={StaticResource ChannelLogoContext}}"
      RequestSize="{StaticResource LogoSize}"
      ResourceLookup="{StaticResource ImgSrcResourceLookup}"
      />

    <!--
      capture the background image theme here so that it can be passed to verticalStack children as a
      StaticResource since the children don't have access to json tree data members outside of their local scope
    -->
    <Views:StaticResourceValue x:Key="TextForegroundValue" Value="{Binding Value.theme, Source={StaticResource ChannelBackgroundContext}, Converter={StaticResource TextForegroundSelector}}" />
    <Views:StaticResourceValue x:Key="TextBackgroundValue" Value="{Binding Value.theme, Source={StaticResource ChannelBackgroundContext}, Converter={StaticResource TextBackgroundSelector}}" />

    <Views:StaticResourceValue x:Key="RootElement" Value="{Binding ElementName=ChannelBanner}" />
    <Views:ThemeStringToThemeConverter x:Key="ThemeStringToTheme" />
    <Views:ThemeStringToThemeConverter x:Key="ThemeStringToTheme" />
    <Views:StaticResourceValue x:Key="Theme" Value="{Binding Value.theme, Source={StaticResource ChannelBackgroundContext}, Converter={StaticResource ThemeStringToTheme}}" />
    <Views:StaticResourceValue x:Key="InverseTheme" Value="{Binding Value.theme, Source={StaticResource ChannelBackgroundContext}, Converter={StaticResource ThemeStringToTheme}, ConverterParameter=Invert}" />

    <Views:WordJoiningConverter x:Key="WordJoiningConverter" />

    <DataTemplate x:Key="ChannelsLogoTemplate">
      <Views:SvgTintableImage
        Height="15"
        Margin="0 15 0 -15"
        Source="{Binding mode, Converter={StaticResource ChannelLogoConverter}}"
        TintColor="{Binding Value, Source={StaticResource TextForegroundValue}}"
        />
    </DataTemplate>

    <Views:FirstOfTypeConverter x:Key="ButtonTitleChild" ItemType="title" />

    <DataTemplate x:Key="UnentitledButtonTextTemplate">
      <TextBlock
        Margin="10"
        DataContext="{Binding children, Converter={StaticResource ButtonTitleChild}}"
        Style="{StaticResource BodyEmphTextBlockStyle}"
        Text="{Binding value}"
        />
    </DataTemplate>

    <DataTemplate x:Key="SpinnerButtonTemplate">
      <ProgressRing IsActive="True" IsIndeterminate="True" />
    </DataTemplate>

    <ampc:KeyValueConverter x:Key="ButtonOrSpinnerTemplateSelector">
      <ampc:KeyValuePair Key="True" Value="{StaticResource UnentitledButtonTextTemplate}" />
      <ampc:KeyValuePair Key="False" Value="{StaticResource SpinnerButtonTemplate}" />
    </ampc:KeyValueConverter>

  </Control.Resources>
  <!--
    All of the arrays children are objects which means the items can't be accessed normally via dot notation. Instead
    FirstOfTypeConverters are required to pull the relevant type out of the object array and then DataContext is heavily used throughout the
    file to fix the context into the object. Some additional Grids are required just for data scoping due to this.
  -->
  <Control.Template>
    <ControlTemplate>
      <StackPanel RequestedTheme="{Binding Value, Source={StaticResource Theme}}">
        <Grid
          Name="channelBannerEntitled"
          Height="120"
          MaxWidth="{StaticResource MaxContentAreaWidth}"
          Margin="-10 0 -10 20"
          CornerRadius="0 0 6 6"
          Visibility="{Binding Value, Source={StaticResource IsEntitled}, Converter={StaticResource BooleanToVisibilityConverter}}"
          >
          <Grid.Resources>
            <Views:JsonImageTintBrush x:Key="LogoImageBrush"
              JsonImageSource="{StaticResource LogoImageSource}"
              TintColor="{Binding Value, Source={StaticResource Background}, Converter={StaticResource ColorToTheme}, ConverterParameter=inverse}"
              />
            <DataTemplate x:Key="ChannelsLogoTemplateEntitled">
              <Views:SvgTintableImage
                Height="15"
                Source="{Binding mode, Converter={StaticResource ChannelLogoConverter}}"
                TintColor="{Binding Value, Source={StaticResource Background}, Converter={StaticResource ColorToTheme}, ConverterParameter=inverse}"
                />
            </DataTemplate>
          </Grid.Resources>
          <Grid.Background>
            <SolidColorBrush Color="{Binding Value, Source={StaticResource Background}}" />
          </Grid.Background>

          <Grid VerticalAlignment="Center">
            <Grid.RowDefinitions>
              <RowDefinition />
              <RowDefinition Height="auto" />
            </Grid.RowDefinitions>
            <ampc:AspectRatioGrid
              Grid.Row="0"
              Width="{Binding Width, Source={StaticResource LogoImageSource}}"
              Height="{Binding Height, Source={StaticResource LogoImageSource}}"
              HorizontalAlignment="Center"
              Views:JsonImage.FixDirection="True"
              AspectRatio="{Binding AspectRatio, Source={StaticResource LogoImageSource}}"
              Background="{Binding Brush, Source={StaticResource LogoImageBrush}}"
              />

            <Views:OptionalContentPresenter
              Grid.Row="1"
              MaxHeight="15"
              Margin="0 10 0 0"
              Content="{Binding attributes}"
              DataContext="{Binding children, Converter={StaticResource SelectChannelLogoChild}}"
              OptionalTemplate="{StaticResource ChannelsLogoTemplateEntitled}"
              />
          </Grid>
        </Grid>
        <ampc:AspectRatioGrid
          Name="channelBannerUnentitled"
          MaxWidth="{StaticResource MaxContentAreaWidth}"
          Margin="-10 0"
          Views:JsonImage.FixDirection="True"
          Views:JsonImage.LoadingCurtain="{StaticResource BkgImageSource}"
          AspectRatio="{Binding AspectRatio, Source={StaticResource BkgImageSource}}"
          Background="{Binding Brush, Source={StaticResource BkgImageBrush}}"
          BorderBrush="{StaticResource LockupBorderBrush}"
          BorderThickness="1"
          CornerRadius="0 0 6 6"
          Visibility="{Binding Value, Source={StaticResource IsEntitled}, Converter={StaticResource BooleanToInverseVisibilityConverter}}"
          >
          <Grid
            Margin="40"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Bottom"
            >
            <Grid.RowDefinitions>
              <RowDefinition />
              <RowDefinition Height="Auto" />
              <RowDefinition />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Name="EmptySizer" Width="*" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Grid
              Name="Logo"
              Grid.Row="0"
              Grid.Column="0"
              HorizontalAlignment="Left"
              DataContext="{Binding children, Converter={StaticResource SelectChannelLogoChild}}"
              >
              <Grid>
                <Grid.Resources>
                  <Views:JsonImageTintBrush x:Key="LogoImageBrush"
                    JsonImageSource="{StaticResource LogoImageSource}"
                    TintColor="{Binding Value.theme, Source={StaticResource ChannelBackgroundContext}, Converter={StaticResource ThemeStringToTheme}}"
                    />
                </Grid.Resources>
                <Grid.RowDefinitions>
                  <RowDefinition />
                  <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <ampc:AspectRatioGrid
                  Grid.Row="0"
                  Width="{Binding Width, Source={StaticResource LogoImageSource}}"
                  Height="{Binding Height, Source={StaticResource LogoImageSource}}"
                  MaxWidth="240"
                  MaxHeight="60"
                  Views:JsonImage.FixDirection="True"
                  AspectRatio="{Binding AspectRatio, Source={StaticResource LogoImageSource}}"
                  Background="{Binding Brush, Source={StaticResource LogoImageBrush}}"
                  />
                <!--
                  We want attributes.mode; however, we can't bind directly to that as then Content won't contain a ICPP and we'll just end up with a Textblock child
                  under the content presenter.
                -->
                <Views:OptionalContentPresenter
                  Grid.Row="1"
                  MaxHeight="15"
                  Content="{Binding attributes}"
                  OptionalTemplate="{StaticResource ChannelsLogoTemplate}"
                  />
              </Grid>

            </Grid>
            <StackPanel
              Grid.Row="0"
              Grid.Column="2"
              HorizontalAlignment="Right"
              VerticalAlignment="Center"
              RequestedTheme="{Binding Value, Source={StaticResource InverseTheme}}"
              >
              <!-- Set requested theme to InverseTheme since we want buttons to be same color as text -->
              <Button
                Name="ButtonOrSpinner"
                MinWidth="{StaticResource ChannelBannerUnentitledButtonMinWidth}"
                MinHeight="50"
                Margin="0 0 0 5"
                Background="{Binding Value, Source={StaticResource TextForegroundValue}}"
                Command="{Binding routerDataSource.selectEventDataSource}"
                ContentTemplate="{Binding ElementName=ButtonOrSpinner, Path=IsEnabled, Converter={StaticResource ButtonOrSpinnerTemplateSelector}, ConverterParameter=Boolean}"
                CornerRadius="6"
                DataContext="{Binding children, Converter={StaticResource SelectButtonChild}}"
                />
              <TextBlock
                HorizontalAlignment="Center"
                DataContext="{Binding children, Converter={StaticResource SelectDisclaimerTextChild}}"
                Foreground="{Binding Value, Source={StaticResource TextForegroundValue}}"
                Style="{StaticResource SubheadEmphTextBlockStyle}"
                Text="{Binding value}"
                />
            </StackPanel>
            <Rectangle
              Grid.Row="1"
              Grid.ColumnSpan="3"
              Height="1"
              Margin="0 40 0 20"
              VerticalAlignment="Center"
              Fill="{Binding Value, Source={StaticResource TextForegroundValue}}"
              />
            <!--
              Need to use Grid here instead of StackPanel since StackPanel
              provides infinite layout space, and as a result text will not wrap
            -->
            <Grid
              Grid.Row="2"
              Grid.Column="0"
              Grid.ColumnSpan="2"
              >
              <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
              </Grid.ColumnDefinitions>
              <TextBlock
                Name="DescriptionText"
                Grid.Column="0"
                HorizontalAlignment="Left"
                DataContext="{Binding children, Converter={StaticResource SelectDescriptionChild}}"
                MaxLines="3"
                Style="{StaticResource Title3TallTextBlockStyle}"
                Text="{Binding value}"
                TextTrimming="CharacterEllipsis"
                TextWrapping="WrapWholeWords"
                />

              <!-- 'more' button, only visible when description text overflows available space -->
              <Button
                Name="MoreButtonOverlay"
                x:Uid="MoreButton"
                Grid.Column="1"
                Margin="0 0 5 -5"
                HorizontalAlignment="Right"
                VerticalAlignment="Bottom"
                AutomationProperties.AccessibilityView="Raw"
                Background="Transparent"
                BorderThickness="0"
                Foreground="{StaticResource TextOverflowButtonForegroundColor}"
                UseSystemFocusVisuals="False"
                Visibility="{Binding IsTextTrimmed, ElementName=DescriptionText, Converter={StaticResource BooleanToVisibilityConverter}}"
                >
                <Button.Flyout>
                  <Flyout>
                    <TextBlock
                      MaxWidth="500"
                      Style="{StaticResource Title3TallTextBlockStyle}"
                      Text="{Binding Text, ElementName=DescriptionText}"
                      />
                  </Flyout>
                </Button.Flyout>
              </Button>
            </Grid>

            <ItemsControl
              Grid.Row="2"
              Grid.Column="2"
              MinWidth="{StaticResource ChannelBannerUnentitledButtonMinWidth}"
              HorizontalAlignment="Right"
              HorizontalContentAlignment="Left"
              ItemsSource="{Binding children, Converter={StaticResource FilterToArrayConverter}, ConverterParameter=text}"
              >
              <ItemsControl.ItemTemplate>
                <DataTemplate>
                  <TextBlock Style="{StaticResource HeadlineEmphTextBlockStyle}" Text="{Binding value, Converter={StaticResource WordJoiningConverter}}" />
                </DataTemplate>
              </ItemsControl.ItemTemplate>
            </ItemsControl>
          </Grid>
        </ampc:AspectRatioGrid>

      </StackPanel>

    </ControlTemplate>
  </Control.Template>

</Control>
